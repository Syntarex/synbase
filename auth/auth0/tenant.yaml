rules: []
rulesConfigs: []
pages: []
resourceServers: []
clients:
    - name: Deploy CLI
      app_type: non_interactive
      cross_origin_auth: false
      custom_login_page_on: true
      grant_types:
          - client_credentials
      is_first_party: true
      is_token_endpoint_ip_header_trusted: false
      jwt_configuration:
          alg: RS256
          lifetime_in_seconds: 36000
          secret_encoded: false
      oidc_conformant: true
      refresh_token:
          expiration_type: non-expiring
          leeway: 0
          infinite_token_lifetime: true
          infinite_idle_token_lifetime: true
          token_lifetime: 31557600
          idle_token_lifetime: 2592000
          rotation_type: non-rotating
      sso_disabled: false
      token_endpoint_auth_method: client_secret_post
    - name: Web
      allowed_clients: []
      allowed_logout_urls:
          -  ##WEB_URL##
      allowed_origins:
          -  ##WEB_URL##
      app_type: regular_web
      callbacks:
          -  ##WEB_URL##/api/auth/callback
      client_aliases: []
      cross_origin_auth: false
      custom_login_page_on: true
      grant_types:
          - authorization_code
          - implicit
          - refresh_token
          - client_credentials
      is_first_party: true
      is_token_endpoint_ip_header_trusted: false
      jwt_configuration:
          alg: RS256
          lifetime_in_seconds: 36000
          secret_encoded: false
      native_social_login:
          apple:
              enabled: false
          facebook:
              enabled: false
      oidc_conformant: true
      refresh_token:
          expiration_type: non-expiring
          leeway: 0
          infinite_token_lifetime: true
          infinite_idle_token_lifetime: true
          token_lifetime: 31557600
          idle_token_lifetime: 2592000
          rotation_type: non-rotating
      sso_disabled: false
      token_endpoint_auth_method: client_secret_post
      web_origins:
          -  ##WEB_URL##
databases: []
connections:
    - name: discord
      strategy: oauth2
      display_name: Discord
      enabled_clients:
          - Web
      is_domain_connection: false
      options:
          scope: identify email
          scripts:
              fetchUserProfile: |-
                  function fetchUserProfile(accessToken, context, callback) {
                    request.get({
                      url: 'https://discordapp.com/api/users/@me',
                      headers: {
                        'Authorization': 'Bearer ' + accessToken
                      }
                    },
                    (err, resp, body) => {
                      if (err) {
                        return callback(err);
                      }

                      if (resp.statusCode !== 200) {
                        return callback(new Error(`[Response code: ${resp.statusCode}] ${body}`));
                      }

                      let bodyParsed;
                      try {
                        bodyParsed = JSON.parse(body);
                      } catch (jsonError) {
                        return callback(new Error(body));
                      }


                      const profile = {
                        user_id: bodyParsed.id,
                        nickname: bodyParsed.username,
                        name: bodyParsed.username,
                      };

                      if (bodyParsed.email) {
                        profile.email = bodyParsed.email;
                        profile.email_verified = bodyParsed.verified;
                      }


                      if (bodyParsed.avatar) {
                        profile.picture = `https://cdn.discordapp.com/avatars/${bodyParsed.id}/${bodyParsed.avatar}.png`;
                      }

                      return callback(null, profile);
                    });
                  }
          icon_url: >-
              https://cdn.auth0.com/marketplace/catalog/content/assets/creators/discord/discord-avatar.png
          tokenURL: https://discordapp.com/api/oauth2/token
          client_id: "##DISCORD_CLIENT_ID##"
          client_secret: ##DISCORD_CLIENT_SECRET##
          authorizationURL: https://discordapp.com/api/oauth2/authorize
          integration_name: discord
tenant:
    enabled_locales:
        - de
        - en
    flags:
        revoke_refresh_token_grant: false
        disable_clickjack_protection_headers: false
    oidc_logout:
        rp_logout_end_session_endpoint_discovery: true
    sandbox_version: "18"
emailProvider: {}
emailTemplates: []
clientGrants: []
guardianFactors:
    - name: duo
      enabled: false
    - name: email
      enabled: false
    - name: otp
      enabled: false
    - name: push-notification
      enabled: false
    - name: recovery-code
      enabled: false
    - name: sms
      enabled: false
    - name: webauthn-platform
      enabled: false
    - name: webauthn-roaming
      enabled: false
guardianFactorProviders: []
guardianFactorTemplates: []
guardianPolicies:
    policies: []
guardianPhoneFactorSelectedProvider:
    provider: auth0
guardianPhoneFactorMessageTypes:
    message_types: []
roles: []
branding:
    templates: []
prompts:
    customText: {}
    universal_login_experience: new
migrations: {}
actions: []
triggers: {}
organizations: []
attackProtection:
    breachedPasswordDetection:
        enabled: false
        shields: []
        admin_notification_frequency: []
        method: standard
        stage:
            pre-user-registration:
                shields: []
    bruteForceProtection:
        enabled: true
        shields:
            - block
            - user_notification
        mode: count_per_identifier_and_ip
        allowlist: []
        max_attempts: 10
    suspiciousIpThrottling:
        enabled: true
        shields:
            - admin_notification
            - block
        allowlist: []
        stage:
            pre-login:
                max_attempts: 100
                rate: 864000
            pre-user-registration:
                max_attempts: 50
                rate: 1200
logStreams: []
themes: []
